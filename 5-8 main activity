package com.example.mvporegontrailfinaliteration;

import androidx.appcompat.app.AppCompatActivity;

import android.media.Image;
import android.os.Bundle;

import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.widget.ImageView;

public class MainActivity extends AppCompatActivity {

    //Creation of classes used.
    RandomEvents re = new RandomEvents();
    Health overallHealth = new Health();
    Location location = new Location(0, 1, 1, 340, 60, 700);
    Shop shop = new Shop();
    Story story = new Story();
    RiverMenu river = new RiverMenu();
    Wagon wagon = new Wagon(shop.food_Price/.1, shop.clothing_Price/.2,shop.weapons_Price/20,shop.oxen_Price/50,shop.spareWagonWheel_Price/8,shop.spareWagonAxel_Price/3, shop.spareWagonTongues_Price/3, shop.medicalSupplyBox_Price/1.5, shop.sewingKit_Price/.50, shop.fireStartingKit_Price/.25, shop.kidsToys_Price/.05, 1, shop.seedPackeges_Price/.01, shop.shovels_Price/2.5, shop.cookingItems_Price/1.5);
    MediaPlayer mp;
    MediaPlayer st;
    MediaPlayer rs;
    MediaPlayer tt;
    MediaPlayer fs;

    //Checks if the wagon has been made for purposes of shopping
    public boolean wagonMade = true;
    //Checks if music is playing
    public boolean mtIsPlaying = false;

    String rations = "";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //Gui screen variables
        final TextView display = findViewById(R.id.Display);
        final Button nextDay = findViewById(R.id.button);
        final TextView date = findViewById(R.id.Date);
        final TextView foodBox = findViewById(R.id.foodRemaining);
        final TextView healthBox = findViewById(R.id.healthBox);
        final TextView reBox = findViewById((R.id.REbox));
        final Button confirm = findViewById(R.id.confirm);
        final EditText User_InputBox = findViewById(R.id.UserInput);
        final TextView shopDisplay = findViewById(R.id.shopDisplay);
        final ImageView picture = findViewById(R.id.imageView);
        final Button enterShop = findViewById(R.id.enterShop);
        final Button leaveShop = findViewById(R.id.leaveShop);
        final ImageView title = findViewById(R.id.fullImage);
        final Button play = findViewById(R.id.playGame);
        final Button credits = findViewById(R.id.credits);
        final TextView storyDisplay = findViewById(R.id.storyDisplay);
        //game won button
        final Button newGame = findViewById(R.id.newGame);
        newGame.setVisibility(View.INVISIBLE);

        //This is to change background color in order to do so use .setBackgroundColor()
        final LinearLayout background = findViewById(R.id.linear);

        //Array of images, images made be added as needed
        final int a[] = {R.drawable.shoppingpic, R.drawable.hattiecampbell, R.drawable.oregonstart, R.drawable.fortkearney, R.drawable.credits, R.drawable.river
        , R.drawable.hall,R.drawable.boise,R.drawable.laramie,R.drawable.win,R.drawable.walla,R.drawable.bridger,R.drawable.chimney,R.drawable.rock,
        R.drawable.southpass,R.drawable.sodasprings,R.drawable.blue,R.drawable.dalles};

        //Creates a media player for main theme
        mp = MediaPlayer.create(this, R.raw.mt);
        st = MediaPlayer.create(this, R.raw.st);
        rs = MediaPlayer.create(this, R.raw.rs);
        tt = MediaPlayer.create(this, R.raw.tt);
        fs = MediaPlayer.create(this, R.raw.fs);


        //puts the title image and button in front
        title.bringToFront();
        play.bringToFront();
        credits.bringToFront();

        //Makes display invisible until used
        display.setVisibility(View.INVISIBLE);

        //When clicked restarts the game
        newGame.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                finish();
                startActivity(getIntent());
            }

        });



        //When clicked removes title screen and prompts user to enter shop
        play.setOnClickListener(new View.OnClickListener()  {

            public void onClick(View v)
            {
                //Sets various gui parts to invisible to reveal a new scene
                title.setVisibility(View.INVISIBLE);
                play.setVisibility(View.INVISIBLE);
                credits.setVisibility(View.INVISIBLE);
                leaveShop.setVisibility(View.INVISIBLE);
                storyDisplay.setVisibility(View.INVISIBLE);
                
                healthBox.setVisibility(View.INVISIBLE);
                reBox.setVisibility(View.INVISIBLE);
                User_InputBox.setVisibility(View.INVISIBLE);
                foodBox.setVisibility(View.INVISIBLE);

                //allows player to enter shop if at a town
                if(location.getAtTown())
                {
                    enterShop.setVisibility(View.VISIBLE);
                }
                //Hides next day button if not at a river. but reveals it if at river
                if(!location.getAtRiver() && !location.getAtLandmark())
                {
                    nextDay.setVisibility(View.INVISIBLE);
                }
                else
                {
                    nextDay.setVisibility(View.VISIBLE);
                }
                if(location.getAtLandmark())
                {
                    nextDay.setVisibility(View.VISIBLE);
                    nextDay.bringToFront();
                }
                
                //pauses river and town theme if at a river or town when button is clicked
                if(location.getAtRiver()) {
                    rs.pause();
                }
                if(location.getAtTown())
                {
                    tt.pause();
                }
                
                //Sets the variable at___ to false until the player reaches another one
                location.setAtLandmark(false);
                location.setAtRiver(false);
                location.setAtTown(false);

               

            }

                                });
                                
            /////////////////////////////////////////////////////   
                       public void onClick(View v) {

                String Input = User_InputBox.getText().toString();

                if(river.riverMenu){

                    //Displayed.setText();
                    String boughtItem = river.secondRiverCategory(Input);
                    Displayed.setText(boughtItem);

                    if (boughtItem.equalsIgnoreCase("Map")){

                        Displayed.setText("Map is displayed");

                    }
                    else if (river.dayRest(Integer.parseInt(Input)) > 1){

                        Displayed.setText("Days rested");


                    }
                else{

                    }
                    Displayed.setText(river.riverCatagory(Input) + river.output);

                }
            }

        });
        
        ///////////////////////////////////////////////////////


//This button opens up the credits menu when clicked
        credits.setOnClickListener(new View.OnClickListener()  {

            public void onClick(View v)
            {
                title.setImageResource(R.drawable.credits);
            }
                                   });

        //When clicked takes player to shop
        enterShop.setOnClickListener(new View.OnClickListener() {

        public void onClick(View v)
        {
            //Sets store layout along with making everything invisible until leaving the shop
            shopDisplay.setText(shop.storeLayout());
            shopDisplay.setVisibility(View.VISIBLE);
            confirm.setVisibility(View.VISIBLE);
            enterShop.setVisibility(View.INVISIBLE);
            reBox.setVisibility(View.INVISIBLE);
            date.setVisibility(View.INVISIBLE);
            healthBox.setVisibility(View.INVISIBLE);
            foodBox.setVisibility(View.INVISIBLE);

            leaveShop.setVisibility(View.VISIBLE);
            User_InputBox.setVisibility(View.VISIBLE);
            //Changes music
            st.start();

            //Changes image to that of the shopping area
            picture.setImageResource(R.drawable.shoppingpic);
        }
                                     });

        leaveShop.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v)
            {
                shopDisplay.setVisibility(View.INVISIBLE);
                reBox.setVisibility(View.VISIBLE);
                date.setVisibility(View.VISIBLE);
                healthBox.setVisibility(View.VISIBLE);
                leaveShop.setVisibility(View.INVISIBLE);
                confirm.setVisibility(View.INVISIBLE);
                User_InputBox.setVisibility(View.INVISIBLE);
                nextDay.setVisibility(View.VISIBLE);
                foodBox.setVisibility(View.VISIBLE);

                //Changes back to Hattie's pic
                picture.setImageResource(R.drawable.hattiecampbell);
            }
                                     });

//A button that confirms the user input changing values in the shop class
        confirm.setOnClickListener(new View.OnClickListener() {

            public void onClick(View v)
            {

                // Get the users input from the text box and convert to a string.
                String input = User_InputBox.getText().toString();

                // If the user decides to buy items then the item bought and the price owed for the item are updated.
                if(shop.buying)
                {
                    String boughtItem = shop.buyItem(input);
                    shopDisplay.setText(boughtItem);
                }
                else
                {
                    shop.calcBoughtItem(shop.otherinput, Integer.parseInt(input));
                    shopDisplay.setText(shop.storeShelf);
                }
            }

        });

        // Actions occur when the Next Day button is clicked.
        nextDay.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                //Switches and removes all necessary aesthetics
                confirm.setVisibility(View.INVISIBLE);
                User_InputBox.setVisibility(View.INVISIBLE);
                leaveShop.setVisibility(View.INVISIBLE);
                foodBox.setVisibility(View.Visible);
                foodBox.setVisibility(View.VISIBLE);
                healthBox.setVisibility(View.VISIBLE);
                reBox.setVisibility(View.VISIBLE);
                
                //Stops the store theme
                st.stop();
                
                //Changes images to oregon start
                picture.setImageResource(R.drawable.oregonstart);
                //Starts the mt if it is not playing
                if(mtIsPlaying = false)
                {
                    mp.start();
                    mtIsPlaying = true;
                }
                mp.start();


                //Changes the variables in the wagon class based upon purchased items.
                if(wagonMade) {
                    wagon = new Wagon(shop.food_Price / .1, shop.clothing_Price / .2, shop.weapons_Price / 20, shop.oxen_Price / 50, shop.spareWagonWheel_Price / 8, shop.spareWagonAxel_Price / 3, shop.spareWagonTongues_Price / 3, shop.medicalSupplyBox_Price / 1.5, shop.sewingKit_Price / .50, shop.fireStartingKit_Price / .25, shop.kidsToys_Price / .05, 1, shop.seedPackeges_Price / .01, shop.shovels_Price / 2.5, shop.cookingItems_Price / 1.5);
                wagonMade = false;
                }

                //Resets display in case no location is reached.
                display.setText("");
                shopDisplay.setText("");

                /* Location based classes that happen everytime a button is clicked.
                    Every button click adds 1 day and changes months if appropriate.
                    checks if the player has reached a river, town, or landmark.
                    Decreases distance of player form river, town, and landmarks.
                */
                location.incrementDay();
                location.setDistanceToLandmark(location.getDistanceToLandmark() - 20);
                location.setDistanceToRiver(location.getDistanceToRiver() - 20);
                location.setDistanceToTown(location.getDistanceToTown() - 20);

                location.atLandmark();


                //Displays town image if the person is at a town based upon which town. If true resets distance to next landmark.
                if (location.getAtTown()) {
                    display.setText("You are at town " + location.whatTown());

                    switch(location.getTownsVisited()) {
                        case 1:
                            title.setImageResource(R.drawable.fortkearney);
                            location.setDistanceToTown(420);
                            break;
                        case 2:
                            title.setImageResource(R.drawable.laramie);
                            location.setDistanceToTown(380);
                            break;
                        case 3:
                            title.setImageResource(R.drawable.bridger);
                            location.setDistanceToTown(320);
                            break;
                        case 4:
                            title.setImageResource(R.drawable.hall);
                            location.setDistanceToTown(340);
                            break;
                        case 5:
                            title.setImageResource(R.drawable.boise);
                            location.setDistanceToTown(360);
                            break;
                        case 6:
                            title.setImageResource(R.drawable.walla);
                            location.setDistanceToTown(340);
                            break;
                        case 7:
                            //Brings up game won screen and music
                            title.setImageResource(R.drawable.win);
                            newGame.setVisibility(View.VISIBLE);
                            newGame.bringToFront();
                            location.setGameWon(true);
                            fs.start();
                            mp.pause();
                        default:
                            break;
                    }

                    //Changes gui to display town photo and information.
                    title.setVisibility(View.VISIBLE);
                    play.setVisibility(View.VISIBLE);
                    play.setText("Enter Town");
                    nextDay.setVisibility(View.INVISIBLE);
                    
                    //Starts the town music
                    tt.start();
                    mp.pause();

                    title.bringToFront();
                    storyDisplay.setVisibility(View.VISIBLE);
                    storyDisplay.bringToFront();
                    storyDisplay.setText(story.storyTowns(location.whatTown()));

                    //if the game is won brings up special button
                    if(location.getGameWon())
                    {
                        newGame.setVisibility(View.VISIBLE);
                        newGame.bringToFront();
                    }
                }
                //If the player is at a river changes gui accordingly
                if (location.getAtRiver()) {
                    display.setText("You are at a river");

                    title.setImageResource(R.drawable.river);

                    title.setVisibility(View.VISIBLE);
                    play.setVisibility(View.VISIBLE);
                    play.setText("Cross River");
                    nextDay.setVisibility(View.INVISIBLE);
                    //nextDay.setVisibility(View.INVISIBLE);
                  
                    rs.start();
                    mp.pause();

                    //Resets the distance to the next river after reaching one depending on which river the player is at
                    switch(location.getRiversVisited())
                    {
                        case 1:
                            location.setDistanceToRiver(300);
                            break;
                        case 2:
                            location.setDistanceToRiver(500);
                            break;
                        case 3:
                            location.setDistanceToRiver(320);
                        case 4:
                            location.setDistanceToRiver(10000);

                    }
                }
                //if player is at a landmark changes gui accordingly
                if (location.getAtLandmark()) {
                    display.setText("You are at " + location.whatLandmark());

                    title.setVisibility(View.VISIBLE);
                    play.setVisibility(View.VISIBLE);
                    play.setText("Leave");
                    nextDay.setVisibility(View.INVISIBLE);

                    switch(location.getLandmarksVisited())
                    {
                        case 1:
                            title.setImageResource(R.drawable.chimney);
                            location.setDistanceToLandmark(260);
                            break;
                        case 2:
                            title.setImageResource(R.drawable.rock);
                            location.setDistanceToLandmark(100);
                            break;
                        case 3:
                            title.setImageResource(R.drawable.southpass);
                            location.setDistanceToLandmark(100);
                            break;
                        case 4:
                            title.setImageResource(R.drawable.sodasprings);
                            location.setDistanceToLandmark(500);
                            break;
                        case 5:
                            title.setImageResource(R.drawable.blue);
                            location.setDistanceToLandmark(100);
                            break;
                        case 6:
                            title.setImageResource(R.drawable.dalles);
                            location.setDistanceToLandmark(10000);
                            break;
                        default:
                            break;

                    }
                    storyDisplay.setText(story.storyLandmarks(location.whatLandmark()));
                    storyDisplay.setVisibility(View.VISIBLE);
                    storyDisplay.bringToFront();
                    //starts town theme if at a town
                    tt.start();
                    mp.pause();
                }



                // restore 10 percent of the total health for resting over night
                overallHealth.startOfDayHealth();

                /* Find whether or not a random event occurs each day.
                    If someone gets bit by a snake the overall health goes up by 10.
                    If Indians help you find food the amount of food goes up 8 pounds.
                    If you take the wrong trail you have to back track using vital supplies.
                    If a random event takes place a prompt appears for the user to see what happened.
                 */
                if (re.snakeBite()) {
                    overallHealth.addHealth(10);
                    reBox.setText("You got bit by a snake");
                } else if (re.indiansHelpFindFood()) {
//                    Wagon.setFood(Wagon.getFood() + 8);
                    reBox.setText("Indians helped you find food");
                } else if (re.wrongTrail()) {

                    reBox.setText("OH-NO you took the wrong trail");
                } else {
                    reBox.setText("It was a normal day!");
                }

                //Depending on how many pounds of food is remaining the ration qualification changes.
                if (wagon.getFood() >= 1500) {
                    rations = "Filling";
                } else if (wagon.getFood() >= 1000) {
                    rations = "Meager";
                } else if (wagon.getFood() >= 5000) {
                    rations = "Bare Bones";
                } else {
                    rations = "Out of food";
                }

                // Using the rations found above determine how the health is effected.
                overallHealth.healthFromFood(rations);

                //Takes away food every day or displays no food
                if (wagon.getFood() > 0) {
                    wagon.setFood(wagon.getFood() - 20);
                    foodBox.setText(Double.toString(wagon.getFood()));
                }
                else
                {
                    foodBox.setText("No Food");
                }

                // display to the user the overall health of the entire group
                healthBox.setText(overallHealth.generalHealth());


                date.setText(location.whatMonth() + " " + location.getDay());
            }
        });

    }
}
